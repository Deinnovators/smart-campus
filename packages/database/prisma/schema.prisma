// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                  @id @default(autoincrement())
  uid             String               @unique
  email           String               @unique
  avatar          String?
  name            String
  password        String
  role            Roles                @default(student)
  sex             Sex                  @default(male)
  dateOfBirth     DateTime
  mobile          String
  address         Address?
  nationality     String               @default("Bangladeshi")
  nationalityType UserNationalityTypes @default(native)
  foreignAddress  ForeignAddress?

  bio String?

  faculty      Faculty?
  chairman     Department? @relation("DepartmentChairman")
  department   Department? @relation("DepartmentMembers", fields: [departmentId], references: [id])
  departmentId Int?        @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("user")
}

enum Sex {
  male
  female
  other
}

enum UserNationalityTypes {
  native
  foreign
}

enum Roles {
  superadmin
  admin
  student
  teacher
  stuff
  beneficiary
  alumni
}

model Address {
  id       Int    @id @default(autoincrement())
  village  String
  division String
  district String
  upazilla String
  union    String
  zip      Int

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  @@map("address")
}

model ForeignAddress {
  id      Int    @id @default(autoincrement())
  street  String
  city    String
  state   String
  country String
  zip     String
  mobile  String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  @@map("foreign_address")
}

enum ModuleStatus {
  active
  inactive
}

model ModuleRegistry {
  id            Int          @id @default(autoincrement())
  accessToRoles Roles[]
  parentUrl     String?
  name          String
  url           String
  customIcon    Boolean?     @default(false)
  icon          String
  status        ModuleStatus @default(active)

  @@map("module_registry")
}

model Faculty {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  dean        User         @relation(fields: [deanId], references: [id])
  deanId      Int          @unique
  deanMessage String?
  departments Department[]
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  chairman        User    @relation("DepartmentChairman", fields: [chairmanId], references: [id])
  chairmanId      Int     @unique
  chairmanMessage String?
  members         User[]  @relation("DepartmentMembers")

  // Faculty that this department belongs to
  faculty   Faculty? @relation(fields: [facultyId], references: [id])
  facultyId Int?
}
