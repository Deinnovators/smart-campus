// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int                  @id @default(autoincrement())
  uid             String               @unique
  email           String               @unique
  avatar          String?
  name            String
  password        String
  role            Roles                @default(student)
  sex             Sex?                 @default(male)
  dateOfBirth     DateTime?
  mobile          String?
  address         Address?
  nationality     String               @default("Bangladeshi")
  nationalityType UserNationalityTypes @default(native)
  foreignAddress  ForeignAddress?

  bio String?

  faculty   Faculty? @relation(fields: [facultyId], references: [id])
  facultyId Int?     @unique
  dean      Faculty? @relation("dean")

  chairman     Department? @relation("DepartmentChairman")
  department   Department? @relation("DepartmentMembers", fields: [departmentId], references: [id])
  departmentId Int?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  CourseOffering CourseOffering[]

  @@map("user")
}

enum Sex {
  male
  female
  other
}

enum UserNationalityTypes {
  native
  foreign
}

enum Roles {
  superadmin
  admin
  student
  teacher
  stuff
  beneficiary
  alumni
}

model Address {
  id       Int    @id @default(autoincrement())
  village  String
  division String
  district String
  upazilla String
  union    String
  zip      Int

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique

  @@map("address")
}

model ForeignAddress {
  id      Int    @id @default(autoincrement())
  street  String
  city    String
  state   String
  country String
  zip     String
  mobile  String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique

  @@map("foreign_address")
}

enum ModuleStatus {
  active
  inactive
}

model ModuleRegistry {
  id            Int          @id @default(autoincrement())
  accessToRoles Roles[]
  parentUrl     String?
  name          String
  url           String
  customIcon    Boolean?     @default(false)
  icon          String
  status        ModuleStatus @default(active)

  @@map("module_registry")
}

model Faculty {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  dean        User         @relation("dean", fields: [deanId], references: [id])
  deanId      Int          @unique
  members     User[]
  deanMessage String?
  departments Department[]
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  chairman        User    @relation("DepartmentChairman", fields: [chairmanId], references: [id])
  chairmanId      Int     @unique
  chairmanMessage String?
  members         User[]  @relation("DepartmentMembers")

  // Faculty that this department belongs to
  faculty   Faculty? @relation(fields: [facultyId], references: [id])
  facultyId Int

  courses             Course[]
  courseDistributions CourseDistribution[]
  classRoutines       ClassRoutine[]
}

model Course {
  id          Int        @id @default(autoincrement())
  name        String
  code        String     @unique
  credit      Float
  description String?
  type        CourseType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt

  department       Department         @relation(fields: [departmentId], references: [id])
  departmentId     Int
  CourseOffering   CourseOffering[]
  CourseCurriculum CourseCurriculum[]
}

model CourseDistribution {
  id              Int              @id @default(autoincrement())
  academicYear    String
  level           Level
  semester        Semester
  session         String
  section         Section
  courseOfferings CourseOffering[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt

  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
}

model CourseOffering {
  id        Int      @id @default(autoincrement())
  courseId  Int
  teacherId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  course Course @relation(fields: [courseId], references: [id])

  teacher User @relation(fields: [teacherId], references: [id])

  CourseDistribution   CourseDistribution? @relation(fields: [courseDistributionId], references: [id])
  courseDistributionId Int?
}

model CourseCurriculum {
  id         Int      @id @default(autoincrement())
  courseId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  curriculum Json
  course     Course   @relation(fields: [courseId], references: [id])
}

model ClassRoutine {
  id           Int      @id @default(autoincrement())
  academicYear String
  level        Level
  semester     Semester
  section      Section
  session      String

  routine   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
}

enum Semester {
  one
  two
}

enum Level {
  I
  II
  III
  IV
}

enum Section {
  a
  b
  c
}

enum CourseType {
  theory
  sessional
  others
}

enum TransportStoppages {
  Campus
  College_Mor
  Terminal
  Moharaja_Mor
  Shahi_Mosjid_Mor
  Shahid_Minar_Mor
  Sadar_Hospital
  Boro_Math
  Suihari
}

model Transport {
  id        Int                 @id @default(autoincrement())
  busNumber Int                 @unique
  schedules TransportSchedule[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now()) @updatedAt
}

enum TripName {
  Students
  Teachers_Officers
  Employees
  Teachers
  Officers
}

model TransportSchedule {
  id          Int                  @id @default(autoincrement())
  tripName    TripName
  tripKind    String
  time        Int
  currentLat  Int
  currentLng  Int
  stoppages   TransportStoppages[]
  transport   Transport            @relation(fields: [transportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transportId Int
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now()) @updatedAt
}
